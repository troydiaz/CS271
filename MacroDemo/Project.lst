Microsoft (R) Macro Assembler Version 14.29.30154.0	    08/03/24 19:52:27
#Random Sorter     (Assignment5.asm			     Page 1 - 1


				TITLE Random Sorter     (Assignment5.asm)

				; Author: Pedro Torres Picon (torrespp@oregonstate.edu)
				; Course / Project ID: CS271-400 / Programming Assignment #5
				; Due Date: 11/21/2016
				; Description: A program that takes an integer from the user
				; between 10 and 200, produces that many random numbers, prints
				; them, sorts them in descending order, calculates the median,
				; and displays the sorted list

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; constant definitions

 = 0000000A			min 	equ 10
 = 000000C8			max 	equ 200
 = 00000064			lo 		equ 100
 = 000003E7			hi		equ	999
 = 0000001E			name_size equ 30

 00000000			.data

				; global variable definitions
 00000000 48 69 2C 20 6D	intro_1 BYTE "Hi, my name is Pedro Torres Picon", 0
	   79 20 6E 61 6D
	   65 20 69 73 20
	   50 65 64 72 6F
	   20 54 6F 72 72
	   65 73 20 50 69
	   63 6F 6E 00
 00000022 54 68 69 73 20	intro_2 BYTE "This program is called Random Sorter", 0
	   70 72 6F 67 72
	   61 6D 20 69 73
	   20 63 61 6C 6C
	   65 64 20 52 61
	   6E 64 6F 6D 20
	   53 6F 72 74 65
	   72 00
 00000047 45 58 54 52 41	ec_1 BYTE "EXTRA CREDIT: The numbers are ordered by column instead of by row", 0
	   20 43 52 45 44
	   49 54 3A 20 54
	   68 65 20 6E 75
	   6D 62 65 72 73
	   20 61 72 65 20
	   6F 72 64 65 72
	   65 64 20 62 79
	   20 63 6F 6C 75
	   6D 6E 20 69 6E
	   73 74 65 61 64
	   20 6F 66 20 62
	   79 20 72 6F 77
	   00
 00000089 57 68 61 74 20	prompt_1 BYTE "What is your name? ", 0
	   69 73 20 79 6F
	   75 72 20 6E 61
	   6D 65 3F 20 00
 0000009D 48 65 79 20 00	greeting_1 BYTE "Hey ", 0
 000000A2 2C 20 6E 69 63	greeting_2 BYTE ", nice to meet you", 0
	   65 20 74 6F 20
	   6D 65 65 74 20
	   79 6F 75 00
 000000B5 45 6E 74 65 72	instructions_1 BYTE "Enter the number of random numbers to generate", 0
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   72 61 6E 64 6F
	   6D 20 6E 75 6D
	   62 65 72 73 20
	   74 6F 20 67 65
	   6E 65 72 61 74
	   65 00
 000000E4 50 6C 65 61 73	prompt_2 BYTE "Please enter a number between 10 and 200 (inclusive): ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   6E 75 6D 62 65
	   72 20 62 65 74
	   77 65 65 6E 20
	   31 30 20 61 6E
	   64 20 32 30 30
	   20 28 69 6E 63
	   6C 75 73 69 76
	   65 29 3A 20 00
 0000011B 4F 4B 2C 20 68	result_1 BYTE "OK, here's the magic:", 0
	   65 72 65 27 73
	   20 74 68 65 20
	   6D 61 67 69 63
	   3A 00
 00000131 57 68 6F 6F 70	error_1	 BYTE "Whoops! The number must be between 10 and 200 (inclusive). Please try again.", 0
	   73 21 20 54 68
	   65 20 6E 75 6D
	   62 65 72 20 6D
	   75 73 74 20 62
	   65 20 62 65 74
	   77 65 65 6E 20
	   31 30 20 61 6E
	   64 20 32 30 30
	   20 28 69 6E 63
	   6C 75 73 69 76
	   65 29 2E 20 50
	   6C 65 61 73 65
	   20 74 72 79 20
	   61 67 61 69 6E
	   2E 00
 0000017E 48 65 72 65 20	title_preamble BYTE "Here are the ", 0
	   61 72 65 20 74
	   68 65 20 00
 0000018C 75 6E 73 6F 72	unsorted_title BYTE "unsorted random numbers:", 0
	   74 65 64 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 3A 00
 000001A5 6E 75 6D 62 65	sorted_title BYTE "numbers sorted in descending order:", 0
	   72 73 20 73 6F
	   72 74 65 64 20
	   69 6E 20 64 65
	   73 63 65 6E 64
	   69 6E 67 20 6F
	   72 64 65 72 3A
	   00
 000001C9 54 68 65 20 6D	median_is BYTE "The median is: ", 0
	   65 64 69 61 6E
	   20 69 73 3A 20
	   00
 000001D9 54 68 61 74 27	good_bye BYTE "That's all for now. Until next time! Good bye ", 0
	   73 20 61 6C 6C
	   20 66 6F 72 20
	   6E 6F 77 2E 20
	   55 6E 74 69 6C
	   20 6E 65 78 74
	   20 74 69 6D 65
	   21 20 47 6F 6F
	   64 20 62 79 65
	   20 00
 00000208 20 00			space BYTE " ", 0

 0000020A  0000001E [		user_name BYTE name_size DUP(?) ; the user's name
	    00
	   ]
 00000228 00000000		request DWORD ? ; a variable to store the number enter by the user
 0000022C  000000C8 [		array DWORD max DUP(?) ; array of max size
	    00000000
	   ]
 0000054C 0000000A		interval DWORD 10 ; the interval (in lines) used in printNum and lineBreak

 00000000			.code

				;---------------------------------------------------------

				  ; main

				  ; Uses all other procedures to run the entire program
				  ; Receives: none
				  ; Returns: none
				  ; Preconditions: none
				  ; Registers changed: none

				;---------------------------------------------------------

 00000000			main PROC

 00000000  E8 00000000 E			call Randomize

 00000005  68 0000020A R			push OFFSET user_name
 0000000A  E8 00000075				call intro

 0000000F  68 00000228 R			push OFFSET request
 00000014  E8 000000F2				call getData

 00000019  68 0000022C R			push OFFSET array
 0000001E  FF 35 00000228 R			push request
 00000024  E8 00000154				call fillArray

 00000029  68 0000018C R			push OFFSET unsorted_title
 0000002E  68 0000022C R			push OFFSET array
 00000033  FF 35 00000228 R			push request
 00000039  E8 0000016B				call printArray

 0000003E  68 0000022C R			push OFFSET array
 00000043  FF 35 00000228 R			push request
 00000049  E8 00000214				call sortArray

 0000004E  68 0000022C R			push OFFSET array
 00000053  FF 35 00000228 R			push request
 00000059  E8 00000250				call printMedian

 0000005E  68 000001A5 R			push OFFSET sorted_title
 00000063  68 0000022C R			push OFFSET array
 00000068  FF 35 00000228 R			push request
 0000006E  E8 00000136				call printArray

 00000073  68 0000020A R			push OFFSET user_name
 00000078  E8 00000280				call farewell

						exit	; exit to operating system
 0000007D  6A 00	   *	    push   +000000000h
 0000007F  E8 00000000 E   *	    call   ExitProcess

 00000084			main ENDP

				;---------------------------------------------------------

				  ; intro

				  ; Displays introductory message, greets the user, gives
				  ; instructions to use the program
				  ; Receives: offset of 'user_name' variable
				  ; Returns: user's name in 'user_name' variable
				  ; Preconditions: none
				  ; Registers changed: edx, ecx, eax

				;---------------------------------------------------------

 00000084			intro PROC

 00000084  55					push	ebp
 00000085  8B EC				mov		ebp, esp
 00000087  60					pushad

 00000088  BA 00000000 R			mov		edx, OFFSET intro_1
 0000008D  E8 00000000 E			call	WriteString
 00000092  E8 00000000 E			call	CrLf

 00000097  BA 00000022 R			mov		edx, OFFSET intro_2
 0000009C  E8 00000000 E			call	WriteString
 000000A1  E8 00000000 E			call	CrLf

 000000A6  BA 00000047 R			mov		edx, OFFSET ec_1
 000000AB  E8 00000000 E			call	WriteString
 000000B0  E8 00000000 E			call	CrLf
 000000B5  E8 00000000 E			call	CrLf

 000000BA  BA 00000089 R			mov		edx, OFFSET prompt_1
 000000BF  E8 00000000 E			call	WriteString
 000000C4  8B 55 08				mov		edx, [ebp+8]
 000000C7  B9 0000001E				mov		ecx, name_size
 000000CC  E8 00000000 E			call	ReadString

 000000D1  BA 0000009D R			mov		edx, OFFSET greeting_1
 000000D6  E8 00000000 E			call	WriteString
 000000DB  8B 55 08				mov		edx, [ebp+8]
 000000DE  E8 00000000 E			call	WriteString
 000000E3  BA 000000A2 R			mov		edx, OFFSET greeting_2
 000000E8  E8 00000000 E			call	WriteString
 000000ED  E8 00000000 E			call	CrLf
 000000F2  E8 00000000 E			call	CrLf

						; instructions
 000000F7  BA 000000B5 R			mov		edx, OFFSET instructions_1
 000000FC  E8 00000000 E			call	WriteString
 00000101  E8 00000000 E			call	CrLf

 00000106  61					popad
 00000107  5D					pop 	ebp

 00000108  C2 0004				ret		4

 0000010B			intro ENDP

				;---------------------------------------------------------

				  ; getData
				  
				  ; Get the request from the user and validate that is is
				  ; between 10 and 200 inclusive
				  ; Receives: offset of 'request' variable
				  ; Returns:  user entered number in 'request' variable
				  ; Preconditions: none
				  ; Registers changed: edx, ecx, eax, ebx, ebp

				;---------------------------------------------------------

 0000010B			getData PROC

					; get the number of composites from user
 0000010B  55					push 	ebp
 0000010C  8B EC				mov 	ebp, esp
 0000010E  60					pushad
 0000010F  8B 4D 08				mov 	ecx, [ebp+8]
 00000112				getNumber:
 00000112  BA 000000E4 R			mov		edx, OFFSET prompt_2
 00000117  E8 00000000 E			call	WriteString
 0000011C  E8 00000000 E			call	ReadDec

 00000121  50					push 	eax
 00000122  E8 00000020				call	validate
 00000127  83 FB 00				cmp 	ebx, 0
 0000012A  7E E6				jle		getNumber

 0000012C  89 01				mov		[ecx], eax

 0000012E  E8 00000000 E			call	CrLf
 00000133  BA 0000011B R			mov		edx, OFFSET result_1
 00000138  E8 00000000 E			call	WriteString
 0000013D  E8 00000000 E			call	CrLf

 00000142  61					popad
 00000143  5D					pop 	ebp

 00000144  C2 0004				ret		4

 00000147			getData ENDP

				;---------------------------------------------------------

				  ; validate
				  
				  ; Validate that a number in eax is within a range
				  ; Receives: the number in eax
				  ; Returns:  1 if valid, 0 if invalid in ebx
				  ; Preconditions: range boundaries stored in min and max
				  ; constants
				  ; Registers changed: ecx, edx, ebx, ebp

				;---------------------------------------------------------

 00000147			validate PROC

						; jump to invalid if number is smaller than 10
 00000147  55					push 	ebp
 00000148  8B EC				mov 	ebp, esp
 0000014A  52					push 	edx
 0000014B  51					push	ecx
 0000014C  8B 4D 08				mov		ecx, [ebp+8]

 0000014F  83 F9 0A				cmp		ecx, min
 00000152  7C 08				jl		invalid

						; jump to valid if number is 200 or smaller
 00000154  81 F9 000000C8			cmp		ecx, max
 0000015A  7E 16				jle		valid

 0000015C				invalid:
						; error, store 0 in ebx
 0000015C  BA 00000131 R			mov		edx, OFFSET error_1
 00000161  E8 00000000 E			call	WriteString
 00000166  E8 00000000 E			call	CrLf
 0000016B  BB 00000000				mov 	ebx, 0
 00000170  EB 05				jmp		endValidate

 00000172				valid:
						; number is valid, store 1 in ebx
 00000172  BB 00000001				mov 	ebx, 1

 00000177				endValidate:
 00000177  59					pop		ecx
 00000178  5A					pop 	edx
 00000179  5D					pop 	ebp

 0000017A  C2 0004				ret 	4

 0000017D			validate ENDP

				;---------------------------------------------------------

				  ; fillArray
				  
				  ; Fills an array passed by reference with random values,
				  ; inspired by ArrayFill, page 298 of Irvine book
				  ; Receives: offset of array and size of array
				  ; Returns: nothing, fills array as side effect
				  ; Preconditions: none
				  ; Registers changed: eax, edx, ecx, ebp, esi

				;---------------------------------------------------------

 0000017D			fillArray PROC

 0000017D  55					push	ebp
 0000017E  8B EC				mov		ebp, esp
 00000180  60					pushad

 00000181  8B 75 0C				mov		esi, [ebp+12]
 00000184  8B 4D 08				mov		ecx, [ebp+8]
 00000187  83 F9 00				cmp		ecx, 0
 0000018A  74 18				je		endFill

 0000018C				fillLoop:
 0000018C  B8 000003E7				mov		eax, hi
 00000191  40					inc		eax
 00000192  83 E8 64				sub		eax, lo

 00000195  E8 00000000 E			call	RandomRange
 0000019A  83 C0 64				add		eax, lo
 0000019D  89 06				mov		[esi], eax
 0000019F  83 C6 04				add		esi, TYPE DWORD
 000001A2  E2 E8				loop	fillLoop

 000001A4				endFill:
 000001A4  61					popad
 000001A5  5D					pop		ebp

 000001A6  C2 0008				ret		8

 000001A9			fillArray ENDP

				;---------------------------------------------------------

				  ; printArray (by row, EXTRA CREDIT)
				  
				  ; Prints to the screen an array passed by reference
				  ; Receives: offset of array, size of array and array
				  ; title (string) to be displayed
				  ; Returns: nothing, prints array as side effect
				  ; Preconditions: none
				  ; Registers changed: eax, edx, ecx, ebp, esi

				  ; NOTE: uncomment the printArray function below, and
				  ; comment this one out to see ordering by column

				;---------------------------------------------------------

 000001A9			printArray PROC

 000001A9  55					push	ebp
 000001AA  8B EC				mov		ebp, esp
 000001AC  60					pushad

 000001AD  8B 4D 08				mov		ecx, [ebp+8]
 000001B0  83 F9 00				cmp		ecx, 0
 000001B3  74 4D				je		endPrint

 000001B5  E8 00000000 E			call 	CrLf
 000001BA  BA 0000017E R			mov		edx, OFFSET title_preamble
 000001BF  E8 00000000 E			call	WriteString
 000001C4  8B 55 10				mov		edx, [ebp+16]
 000001C7  E8 00000000 E			call	WriteString
 000001CC  E8 00000000 E			call	CrLf

 000001D1  B8 0000000A				mov 	eax, 10

 000001D6			  addingLoop:
 000001D6  BB 00000000				mov		ebx, 0
 000001DB  8B 75 0C				mov		esi, [ebp+12]

 000001DE					printLoop:
 000001DE  8B D3					mov 	edx, ebx
 000001E0  03 D0					add 	edx, eax

 000001E2  FF 35 0000054C R				push 	interval
 000001E8  56						push 	esi
 000001E9  52						push 	edx
 000001EA  E8 00000018					call	printNum

 000001EF  83 C6 04					add		esi, TYPE DWORD
 000001F2  43						inc 	ebx
 000001F3  3B D9					cmp 	ebx, ecx
 000001F5  72 E7					jb		printLoop

 000001F7  48					dec		eax
 000001F8  E8 00000000 E			call	CrLf
 000001FD  83 F8 00				cmp		eax, 0
 00000200  77 D4				ja 		addingLoop

 00000202				endPrint:
 00000202  61					popad
 00000203  5D					pop		ebp

 00000204  C2 000C				ret		12

 00000207			printArray ENDP


				;---------------------------------------------------------

				  ; printArray (by column, original, no EC)
				 
				  ; Prints to the screen an array passed by reference
				  ; Receives: offset of array, size of array and array
				  ; title (string) to be displayed
				  ; Returns: nothing, prints array as side effect
				  ; Preconditions: none
				  ; Registers changed: eax, edx, ecx, ebp, esi

				;---------------------------------------------------------

				 ;printArray PROC
				;
				 		;push	ebp
				 		;mov		ebp, esp
				 		;pushad
				;
				 		;mov		esi, [ebp+12]
				 		;mov		ecx, [ebp+8]
				 		;cmp		ecx, 0
				 		;je		endPrint
				 		;call 	CrLf
				 		;mov		edx, OFFSET title_preamble
				 		;call	WriteString
				 		;mov		edx, [ebp+16]
				 		;call	WriteString
				 		;call	CrLf
				;
				 	;printLoop:
				 		;mov		eax, [esi]
				 		;call	WriteDec
				 		;mov		edx, OFFSET space
				 		;call	WriteString
				 		;call	WriteString
				 		;call	WriteString
				;
				 		;push	interval
				 		;push	[ebp+8]
				 		;call	lineBreak
				;
				 		;add		esi, TYPE DWORD
				 		;loop	printLoop
				;
				 	;endPrint:
				 		;popad
				 		;pop		ebp
				;
				 		;ret		12
				;
				 ;printArray ENDP

				;---------------------------------------------------------

				  ; printNum (used by printArray by row)
				  
				  ; Checks if the current iteration of the loop is a
				  ; multiple of a certain interval and prints the appropriate
				  ; items to achieve row ordering
				  ; Receives: variable that holds the current interval, and
				  ; the array by reference
				  ; Returns: nothing, prints an item as side effect
				  ; Preconditions: none
				  ; Registers changed: eax, ebp, ebx, edx

				;---------------------------------------------------------

 00000207			printNum PROC

 00000207  55					push	ebp
 00000208  8B EC				mov		ebp, esp
 0000020A  60					pushad

 0000020B  8B 45 08		 		mov 	eax, [ebp+8]
 0000020E  2B D2				sub		edx, edx ; clean edx for division
 00000210  8B 5D 10				mov		ebx, [ebp+16] ; move interval into ebx
 00000213  F7 F3		 		div		ebx
 00000215  83 FA 00		 		cmp 	edx, 0
 00000218  75 1E		 		jne		noPrint; if the current number of printed items is not divisible by 10, skip adding the space

 0000021A  8B 75 0C				mov 	esi, [ebp+12]
 0000021D  8B 06				mov		eax, [esi]
 0000021F  E8 00000000 E			call	WriteDec

 00000224  BA 00000208 R			mov		edx, OFFSET space
 00000229  E8 00000000 E			call	WriteString
 0000022E  E8 00000000 E			call	WriteString
 00000233  E8 00000000 E			call	WriteString

 00000238				noPrint:
 00000238  61					popad
 00000239  5D					pop		ebp

 0000023A  C2 000C				ret		12

 0000023D			printNum ENDP

				;---------------------------------------------------------

				  ; lineBreak (used by printArray by column)
				 
				  ; Checks if the current iteration of the loop is a
				  ; multiple of a certain interval and inserts a page break
				  ; Receives: variable that holds the interval for a break
				  ; Returns: nothing, adds a line break as a side effect
				  ; Preconditions: none
				  ; Registers changed: eax, ebp, ecx, ebx, edx

				;---------------------------------------------------------

 0000023D			lineBreak PROC

 0000023D  55					push	ebp
 0000023E  8B EC				mov		ebp, esp
 00000240  60					pushad

 00000241  8B 45 08		 		mov 	eax, [ebp+8]
 00000244  2B C1		 		sub		eax, ecx ; place the current number of printed items in eax
 00000246  83 F8 00		 		cmp		eax, 0
 00000249  74 12		 		je		noLineBreak ; do not insert line break if this is the first iteration in the loop

 0000024B  40			 		inc		eax
 0000024C  2B D2				sub		edx, edx ; clean edx for division
 0000024E  8B 5D 0C				mov		ebx, [ebp+12] ; move divisor into ebx
 00000251  F7 F3		 		div		ebx
 00000253  83 FA 00		 		cmp 	edx, 0
 00000256  75 05		 		jne		noLineBreak ; if the current number of printed items is not divisible by 10, skip adding the space
 00000258  E8 00000000 E	 		call 	CrLf

 0000025D				noLineBreak:
 0000025D  61					popad
 0000025E  5D					pop		ebp

 0000025F  C2 0008				ret		8

 00000262			lineBreak ENDP

				;---------------------------------------------------------

				  ; sortArray
				 
				  ; Sorts an array passed by reference, with a simple
				  ; bubble sort algorithm
				  ; Receives: offset of array and size of array
				  ; Returns: nothing, sorts array as side effect
				  ; Preconditions: none
				  ; Registers changed: eax, edx, ecx, ebp, esi

				;---------------------------------------------------------

 00000262			sortArray PROC ; receives the array to be sorted and the size

 00000262  55					push	ebp
 00000263  8B EC				mov		ebp, esp
 00000265  60					pushad

 00000266				sortLoop:
 00000266  8B 75 0C				mov		esi, [ebp+12]
 00000269  8B 4D 08				mov		ecx, [ebp+8]
 0000026C  49					dec		ecx
 0000026D  83 F9 00				cmp		ecx, 0
 00000270  7E 21				jle		endSort
 00000272  BA 00000000				mov		edx, 0 ; flag to see if a swap happened in an iteration of the outer while loop

 00000277					swapLoop:
 00000277  8B 06					mov		eax, [esi]
 00000279  3B 46 04					cmp		eax, [esi+4]
 0000027C  7D 0B					jge		dontSwap

 0000027E  56						push	esi
 0000027F  E8 00000014					call	swap
 00000284  BA 00000001					mov		edx, 1 ; set flag when swap happens

 00000289					dontSwap:
 00000289  83 C6 04					add		esi, TYPE DWORD
 0000028C  E2 E9					loop	swapLoop

 0000028E  83 FA 01				cmp		edx, 1
 00000291  74 D3				je		sortLoop ; jump back and sort again if a swap was made this iteration

 00000293				endSort:
 00000293  61					popad
 00000294  5D					pop		ebp

 00000295  C2 0008				ret		8

 00000298			sortArray ENDP

				;---------------------------------------------------------

				  ; swap
				 
				  ; Swaps the value in a provided offset with the following
				  ; value in a DWORD array
				  ; Receives: offset of value to be swapped
				  ; Returns: nothing, swaps values as side effect
				  ; Preconditions: value needs to be in an array of DWORD
				  ; Registers changed: eax, ebx, ebp, esi

				;---------------------------------------------------------

 00000298			swap PROC ; receives the two array items to be swapped by reference

 00000298  55					push	ebp
 00000299  8B EC				mov		ebp, esp
 0000029B  60					pushad

 0000029C  8B 75 08				mov		esi, [ebp+8]
 0000029F  8B 1E				mov		ebx, [esi]
 000002A1  8B 46 04				mov		eax, [esi+4]
 000002A4  89 5E 04				mov		[esi+4], ebx
 000002A7  89 06				mov		[esi], eax

 000002A9  61					popad
 000002AA  5D					pop		ebp

 000002AB  C2 0004				ret		4

 000002AE			swap ENDP

				;---------------------------------------------------------

				  ; printMedian
				  
				  ; Calculates the median of a set of values in an array,
				  ; and prints it to the screen
				  ; Receives: offset of array and size of array
				  ; Returns: nothing, prints the median as side effect
				  ; Preconditions: none
				  ; Registers changed: eax, ebx, edx, ebp, esi

				;---------------------------------------------------------

 000002AE			printMedian PROC

 000002AE  55					push	ebp
 000002AF  8B EC				mov		ebp, esp
 000002B1  60					pushad

 000002B2  8B 75 0C				mov		esi, [ebp+12] ; array offset to esi
 000002B5  8B 45 08				mov		eax, [ebp+8] ; size to eax
 000002B8  BB 00000002				mov		ebx, 2

 000002BD  2B D2				sub		edx, edx ; clean edx to divide ??
 000002BF  F7 F3				div		ebx ; divide the number of items in the array by 2
 000002C1  52					push	edx ; save remainder to cmp later

 000002C2  BB 00000004				mov		ebx, 4
 000002C7  F7 E3				mul		ebx
 000002C9  03 F0				add		esi, eax
 000002CB  8B 06				mov		eax, [esi]

 000002CD  5A					pop		edx ; restore edx
 000002CE  83 FA 00				cmp		edx, 0
 000002D1  75 0C				jne		printResult

						; if number of items is even

 000002D3  83 EE 04				sub		esi, 4
 000002D6  03 06				add		eax, [esi]
 000002D8  BB 00000002				mov		ebx, 2
 000002DD  F7 F3				div		ebx
						;jmp		printResult

					;odd:
						; if number of items is odd
						;add		esi, eax*4
						;mov		eax, [esi]

 000002DF				printResult:
 000002DF  E8 00000000 E			call	CrLf
 000002E4  BA 000001C9 R			mov		edx, OFFSET median_is
 000002E9  E8 00000000 E			call	WriteString
 000002EE  E8 00000000 E			call	WriteDec
 000002F3  E8 00000000 E			call	CrLf

 000002F8  61					popad
 000002F9  5D					pop		ebp

 000002FA  C2 0008				ret		8

 000002FD			printMedian ENDP

				;---------------------------------------------------------

				  ; farewell
				 
				  ; Displays a message to say good bye to the user
				  ; Receives: offset of user_name variable
				  ; Returns:  none
				  ; Preconditions: user's name stored in user_name
				  ; Registers changed: edx, ebp

				;---------------------------------------------------------

 000002FD			farewell PROC

 000002FD  55			  push  ebp
 000002FE  8B EC		  mov   ebp, esp

 00000300  E8 00000000 E		call	CrLf
 00000305  BA 000001D9 R		mov		edx, OFFSET good_bye
 0000030A  E8 00000000 E		call	WriteString
 0000030F  8B 55 08			mov		edx, [ebp+8]
 00000312  E8 00000000 E		call	WriteString
 00000317  E8 00000000 E		call	CrLf
 0000031C  5D			  pop   ebp

 0000031D  C2 0004			ret   4

 00000320			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30154.0	    08/03/24 19:52:27
#Random Sorter     (Assignment5.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000550 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000320 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
farewell . . . . . . . . . . . .	P Near	 000002FD _TEXT	Length= 00000023 Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 0000017D _TEXT	Length= 0000002C Public STDCALL
  fillLoop . . . . . . . . . . .	L Near	 0000018C _TEXT	
  endFill  . . . . . . . . . . .	L Near	 000001A4 _TEXT	
getData  . . . . . . . . . . . .	P Near	 0000010B _TEXT	Length= 0000003C Public STDCALL
  getNumber  . . . . . . . . . .	L Near	 00000112 _TEXT	
intro  . . . . . . . . . . . . .	P Near	 00000084 _TEXT	Length= 00000087 Public STDCALL
lineBreak  . . . . . . . . . . .	P Near	 0000023D _TEXT	Length= 00000025 Public STDCALL
  noLineBreak  . . . . . . . . .	L Near	 0000025D _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000084 Public STDCALL
printArray . . . . . . . . . . .	P Near	 000001A9 _TEXT	Length= 0000005E Public STDCALL
  addingLoop . . . . . . . . . .	L Near	 000001D6 _TEXT	
  printLoop  . . . . . . . . . .	L Near	 000001DE _TEXT	
  endPrint . . . . . . . . . . .	L Near	 00000202 _TEXT	
printMedian  . . . . . . . . . .	P Near	 000002AE _TEXT	Length= 0000004F Public STDCALL
  printResult  . . . . . . . . .	L Near	 000002DF _TEXT	
printNum . . . . . . . . . . . .	P Near	 00000207 _TEXT	Length= 00000036 Public STDCALL
  noPrint  . . . . . . . . . . .	L Near	 00000238 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortArray  . . . . . . . . . . .	P Near	 00000262 _TEXT	Length= 00000036 Public STDCALL
  sortLoop . . . . . . . . . . .	L Near	 00000266 _TEXT	
  swapLoop . . . . . . . . . . .	L Near	 00000277 _TEXT	
  dontSwap . . . . . . . . . . .	L Near	 00000289 _TEXT	
  endSort  . . . . . . . . . . .	L Near	 00000293 _TEXT	
swap . . . . . . . . . . . . . .	P Near	 00000298 _TEXT	Length= 00000016 Public STDCALL
validate . . . . . . . . . . . .	P Near	 00000147 _TEXT	Length= 00000036 Public STDCALL
  invalid  . . . . . . . . . . .	L Near	 0000015C _TEXT	
  valid  . . . . . . . . . . . .	L Near	 00000172 _TEXT	
  endValidate  . . . . . . . . .	L Near	 00000177 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 0000022C _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
ec_1 . . . . . . . . . . . . . .	Byte	 00000047 _DATA	
error_1  . . . . . . . . . . . .	Byte	 00000131 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
good_bye . . . . . . . . . . . .	Byte	 000001D9 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting_1 . . . . . . . . . . .	Byte	 0000009D _DATA	
greeting_2 . . . . . . . . . . .	Byte	 000000A2 _DATA	
hi . . . . . . . . . . . . . . .	Number	 000003E7h   
instructions_1 . . . . . . . . .	Byte	 000000B5 _DATA	
interval . . . . . . . . . . . .	DWord	 0000054C _DATA	
intro_1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro_2  . . . . . . . . . . . .	Byte	 00000022 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lo . . . . . . . . . . . . . . .	Number	 00000064h   
magenta  . . . . . . . . . . . .	Number	 00000005h   
max  . . . . . . . . . . . . . .	Number	 000000C8h   
median_is  . . . . . . . . . . .	Byte	 000001C9 _DATA	
min  . . . . . . . . . . . . . .	Number	 0000000Ah   
name_size  . . . . . . . . . . .	Number	 0000001Eh   
prompt_1 . . . . . . . . . . . .	Byte	 00000089 _DATA	
prompt_2 . . . . . . . . . . . .	Byte	 000000E4 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
request  . . . . . . . . . . . .	DWord	 00000228 _DATA	
result_1 . . . . . . . . . . . .	Byte	 0000011B _DATA	
sorted_title . . . . . . . . . .	Byte	 000001A5 _DATA	
space  . . . . . . . . . . . . .	Byte	 00000208 _DATA	
title_preamble . . . . . . . . .	Byte	 0000017E _DATA	
unsorted_title . . . . . . . . .	Byte	 0000018C _DATA	
user_name  . . . . . . . . . . .	Byte	 0000020A _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
