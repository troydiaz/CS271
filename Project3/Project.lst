Microsoft (R) Macro Assembler Version 14.29.30154.0	    07/22/24 18:18:04
<Project 3 - Data Validation, Looping, and Constants     (Pr  Page 1 - 1


				TITLE Project 3 - Data Validation, Looping, and Constants     (Proj3_diaztr.asm)

				; Author: Troy Diaz
				; Last Modified: 7/22/2024
				; OSU email address: diaztr@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 3               Due Date: 7/21/2024
				; Description: A MASM program that returns the maximum, minimum, average, and
				; sum of valid numbers between [-200,-100] or [-50,-1] (inclusive). 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 =-000000C8			LOWBOUND_1 = -200		; Upper and lower bounds
 =-00000064			UPBOUND_2 = -100

 =-00000032			LOWBOUND_3 = -50
 =-00000001			UPBOUND_4 = -1

 00000000			.data

 00000000 57 65 6C 63 6F	intro_1		BYTE "Welcome to the Integer Accumulator by Troy Diaz",0
	   6D 65 20 74 6F
	   20 74 68 65 20
	   49 6E 74 65 67
	   65 72 20 41 63
	   63 75 6D 75 6C
	   61 74 6F 72 20
	   62 79 20 54 72
	   6F 79 20 44 69
	   61 7A 00
 00000030 57 65 20 77 69	intro_2		BYTE "We will be accumulating user-input negative integers between the specified bounds, then displaying",0
	   6C 6C 20 62 65
	   20 61 63 63 75
	   6D 75 6C 61 74
	   69 6E 67 20 75
	   73 65 72 2D 69
	   6E 70 75 74 20
	   6E 65 67 61 74
	   69 76 65 20 69
	   6E 74 65 67 65
	   72 73 20 62 65
	   74 77 65 65 6E
	   20 74 68 65 20
	   73 70 65 63 69
	   66 69 65 64 20
	   62 6F 75 6E 64
	   73 2C 20 74 68
	   65 6E 20 64 69
	   73 70 6C 61 79
	   69 6E 67 00
 00000093 20 73 74 61 74	intro_3		BYTE " statistics of the input values including minimum, maximum, and average values values, total sum, and",0
	   69 73 74 69 63
	   73 20 6F 66 20
	   74 68 65 20 69
	   6E 70 75 74 20
	   76 61 6C 75 65
	   73 20 69 6E 63
	   6C 75 64 69 6E
	   67 20 6D 69 6E
	   69 6D 75 6D 2C
	   20 6D 61 78 69
	   6D 75 6D 2C 20
	   61 6E 64 20 61
	   76 65 72 61 67
	   65 20 76 61 6C
	   75 65 73 20 76
	   61 6C 75 65 73
	   2C 20 74 6F 74
	   61 6C 20 73 75
	   6D 2C 20 61 6E
	   64 00
 000000F9 20 74 6F 74 61	intro_4		BYTE " total number of valid inputs.",0
	   6C 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 76 61 6C
	   69 64 20 69 6E
	   70 75 74 73 2E
	   00

 00000118 48 65 6C 6C 6F	greetings_1 BYTE "Hello there, ",0
	   20 74 68 65 72
	   65 2C 20 00
 00000126 57 68 61 74 20	prompt_1	BYTE "What is your name? ",0
	   69 73 20 79 6F
	   75 72 20 6E 61
	   6D 65 3F 20 00
 0000013A 50 6C 65 61 73	prompt_2	BYTE "Please enter numbers in [-200, -100] or [-50, -1].",0
	   65 20 65 6E 74
	   65 72 20 6E 75
	   6D 62 65 72 73
	   20 69 6E 20 5B
	   2D 32 30 30 2C
	   20 2D 31 30 30
	   5D 20 6F 72 20
	   5B 2D 35 30 2C
	   20 2D 31 5D 2E
	   00
 0000016D 45 6E 74 65 72	prompt_3	BYTE "Enter a non-negative number when you are finished to see results.",0
	   20 61 20 6E 6F
	   6E 2D 6E 65 67
	   61 74 69 76 65
	   20 6E 75 6D 62
	   65 72 20 77 68
	   65 6E 20 79 6F
	   75 20 61 72 65
	   20 66 69 6E 69
	   73 68 65 64 20
	   74 6F 20 73 65
	   65 20 72 65 73
	   75 6C 74 73 2E
	   00
 000001AF 45 6E 74 65 72	prompt_4	BYTE "Enter number: ",0
	   20 6E 75 6D 62
	   65 72 3A 20 00

 000001BE  00000011 [		userName	BYTE 17 DUP(0)
	    00
	   ]
 000001CF 00000000		inputValue	SDWORD ?		; User entered number

 000001D3 00000000		max			DWORD ?			; Calculated values
 000001D7 00000000		min			DWORD ?
 000001DB 00000000		sum			DWORD ?
 000001DF 00000000		avg			DWORD ?
 000001E3 00000000		count		DWORD ?	
 000001E7 00000000		remainder	DWORD ?		

 000001EB 54 68 65 20 6D	maxNum		BYTE "The maximum valid number is ",0	
	   61 78 69 6D 75
	   6D 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 20
	   69 73 20 00
 00000208 54 68 65 20 6D	minNum		BYTE "The minimum valid number is ",0
	   69 6E 69 6D 75
	   6D 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 20
	   69 73 20 00
 00000225 54 68 65 20 73	sumNum		BYTE "The sum of your valid number is ",0
	   75 6D 20 6F 66
	   20 79 6F 75 72
	   20 76 61 6C 69
	   64 20 6E 75 6D
	   62 65 72 20 69
	   73 20 00
 00000246 54 68 65 20 72	avgNum		BYTE "The rounded average is ",0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 20 00

 0000025E 4E 75 6D 62 65	errorMsg	BYTE "Number Invalid!",0
	   72 20 49 6E 76
	   61 6C 69 64 21
	   00
 0000026E 59 6F 75 20 65	validMsg	BYTE "You entered ",0
	   6E 74 65 72 65
	   64 20 00
 0000027B 20 76 61 6C 69	validMsg_2  BYTE " valid numbers.",0
	   64 20 6E 75 6D
	   62 65 72 73 2E
	   00
 0000028B 59 6F 75 20 6E	noNumMsg	BYTE "You need at least one number entered before submitting!",0
	   65 65 64 20 61
	   74 20 6C 65 61
	   73 74 20 6F 6E
	   65 20 6E 75 6D
	   62 65 72 20 65
	   6E 74 65 72 65
	   64 20 62 65 66
	   6F 72 65 20 73
	   75 62 6D 69 74
	   74 69 6E 67 21
	   00

 000002C3 57 65 20 68 61	goodbye BYTE "We have to stop meeting like this. Farewell, ",0
	   76 65 20 74 6F
	   20 73 74 6F 70
	   20 6D 65 65 74
	   69 6E 67 20 6C
	   69 6B 65 20 74
	   68 69 73 2E 20
	   46 61 72 65 77
	   65 6C 6C 2C 20
	   00

 00000000			.code
 00000000			main PROC

				; -----------------------------
				; Initialize variables

				; -----------------------------

 00000000  C7 05 000001CF R	  mov		inputValue, -1				; Negative for while loop
	   FFFFFFFF
 0000000A  C7 05 000001DB R	  mov		sum, 0
	   00000000
 00000014  C7 05 000001DF R	  mov		avg, 0
	   00000000
 0000001E  C7 05 000001E3 R	  mov		count, 0
	   00000000
 00000028  C7 05 000001E7 R	  mov		remainder, 0
	   00000000

				; -----------------------------
				; Introduces the user to the program and gets their name.
				; Greets them using their name.

				; -----------------------------

 00000032  BA 00000000 R	  mov		EDX, OFFSET intro_1			; Introduce user to the program
 00000037  E8 00000000 E	  call		WriteString
 0000003C  E8 00000000 E	  call		CrLf

 00000041  BA 00000030 R	  mov		EDX, OFFSET intro_2
 00000046  E8 00000000 E	  call		WriteString
 0000004B  BA 00000093 R	  mov		EDX, OFFSET intro_3
 00000050  E8 00000000 E	  call		WriteString
 00000055  BA 000000F9 R	  mov		EDX, OFFSET intro_4
 0000005A  E8 00000000 E	  call		WriteString
 0000005F  E8 00000000 E	  call		CrLf

 00000064  BA 00000126 R	  mov		EDX, OFFSET prompt_1		; Get user's name
 00000069  E8 00000000 E	  call		WriteString
 0000006E  BA 000001BE R	  mov		EDX, OFFSET userName
 00000073  B9 00000010		  mov		ECX, 16
 00000078  E8 00000000 E	  call		ReadString

 0000007D  BA 00000118 R	  mov		EDX, OFFSET greetings_1		; Welcome user
 00000082  E8 00000000 E	  call		WriteString
 00000087  BA 000001BE R	  mov		EDX, OFFSET userName
 0000008C  E8 00000000 E	  call		WriteString
 00000091  E8 00000000 E	  call		CrLf
 00000096  E8 00000000 E	  call		CrLf

				; -----------------------------
				; State the bounds and limits of user input. 
				; Get user's numbers and check if they are valid.
				; Invalid will loop until a valid number is given.
				; Entering a non-negative number proceeds to results.

				; -----------------------------

 0000009B  BA 0000013A R	  mov		EDX, OFFSET prompt_2
 000000A0  E8 00000000 E	  call		WriteString
 000000A5  E8 00000000 E	  call		CrLf

 000000AA  BA 0000016D R	  mov		EDX, OFFSET prompt_3
 000000AF  E8 00000000 E	  call		WriteString
 000000B4  E8 00000000 E	  call		CrLf

 000000B9  A1 000001CF R	  mov		EAX, inputValue

 000000BE  BA 000001AF R	  mov		EDX, OFFSET prompt_4	; If first num is the max value, store first
 000000C3  E8 00000000 E	  call		WriteString				; and enter while loop
 000000C8  E8 00000000 E	  call		ReadInt
 000000CD  A3 000001CF R	  mov		inputValue, EAX
 000000D2  A3 000001D3 R	  mov		max, EAX
 000000D7  EB 14		  jmp		_initialStart

 000000D9			_whileNumIsNeg:						; While (inputValue < 0)
 000000D9  BA 000001AF R	  mov		EDX, OFFSET prompt_4
 000000DE  E8 00000000 E	  call		WriteString
 000000E3  E8 00000000 E	  call		ReadInt
 000000E8  A3 000001CF R	  mov		inputValue, EAX
				 
 000000ED			_initialStart:
 000000ED  A1 000001CF R	  mov		EAX, inputValue
 000000F2  83 F8 00		  cmp		EAX, 0					; Exit condition
 000000F5  0F 8D 0000009B	  jge		_endWhile

 000000FB  A1 000001CF R	  mov		EAX, inputValue			; First condition, inputValue < -200, then error
 00000100  3D FFFFFF38		  cmp		EAX, LOWBOUND_1
 00000105  7C 67		  jl		_error

 00000107  A1 000001CF R	  mov		EAX, inputValue			; Second condition, inputValue <= -100, update values
 0000010C  83 F8 9C		  cmp		EAX, UPBOUND_2
 0000010F  7E 1E		  jle		_updateData		
				  
 00000111  A1 000001CF R	  mov		EAX, inputValue			; Third condition, inputValue > -100, validate data
 00000116  83 F8 9C		  cmp		EAX, UPBOUND_2
 00000119  7F 00		  jg		_validateData

 0000011B			_validateData:
 0000011B  A1 000001CF R	  mov		EAX, inputValue			; Fourth condition, if inputValue is > -100 AND
 00000120  83 F8 CE  cmp		EAX, LOWBOUND_3			; < -50, send error
 00000123  7C 49		  jl		_error

 00000125  A1 000001CF R	  mov		EAX, inputValue			; Fifth and last condition, if inputValue is > -50,
 0000012A  83 F8 CE		  cmp		EAX, LOWBOUND_3			; update values
 0000012D  7F 00		  jg		_updateData

 0000012F			_updateData:
 0000012F  FF 05 000001E3 R	  inc		count					; For avg calc and two valid numbers

 00000135  A1 000001CF R	  mov		EAX, inputValue			; Update sum of valid numbers
 0000013A  01 05 000001DB R	  add		sum, EAX

 00000140  A1 000001CF R	  mov		EAX, inputValue			; Update maximum number
 00000145  3B 05 000001D7 R	  cmp		EAX, min
 0000014B  7F 17		  jg		_updateMax

 0000014D  A1 000001CF R	  mov		EAX, inputValue			; Update minimum number
 00000152  3B 05 000001D7 R	  cmp		EAX, min
 00000158  7C 00		  jl		_updateMin

 0000015A			_updateMin:
 0000015A  A3 000001D7 R	  mov		min, EAX
 0000015F  E9 FFFFFF75		  jmp		_whileNumIsNeg

 00000164			_updateMax:
 00000164  A3 000001D3 R	  mov		max, EAX
 00000169  E9 FFFFFF6B		  jmp		_whileNumIsNeg

 0000016E			_error:
 0000016E  BA 0000025E R	  mov		EDX, OFFSET errorMsg	
 00000173  E8 00000000 E	  call		WriteString
 00000178  E8 00000000 E	  call		CrLf
 0000017D  E9 FFFFFF57		  jmp		_whileNumIsNeg

 00000182			_zeroNumbers:
 00000182  BA 0000028B R	  mov		EDX, OFFSET noNumMsg	; Need at least one valid number
 00000187  E8 00000000 E	  call		WriteString
 0000018C  E8 00000000 E	  call		CrLf
 00000191  E9 FFFFFF43		  jmp		_whileNumIsNeg

 00000196			_endWhile:
 00000196  83 3D 000001E3 R	  cmp		count, 0
	   00
 0000019D  74 E3		  je		_zeroNumbers

 0000019F  A1 000001DB R	  mov		EAX, sum				; Calculate average
 000001A4  99			  cdq
 000001A5  8B 1D 000001E3 R	  mov		EBX, count
 000001AB  F7 FB		  idiv		EBX						; Signed division
 000001AD  A3 000001DF R	  mov		avg, EAX				; Update average

				; -----------------------------
				; Display maximum, minimum, sum, and average of valid numbers.

				; -----------------------------

 000001B2			_displayResults:
 000001B2  BA 0000026E R	  mov		EDX, OFFSET validMsg	; Display Results
 000001B7  E8 00000000 E	  call		WriteString
 000001BC  A1 000001E3 R	  mov		EAX, count
 000001C1  E8 00000000 E	  call		WriteDec
 000001C6  BA 0000027B R	  mov		EDX, OFFSET validMsg_2
 000001CB  E8 00000000 E	  call		WriteString
 000001D0  E8 00000000 E	  call		CrLf

 000001D5  BA 000001EB R	  mov		EDX, OFFSET maxNum		; Max number
 000001DA  E8 00000000 E	  call		WriteString
 000001DF  A1 000001D3 R	  mov		EAX, max
 000001E4  E8 00000000 E	  call		WriteInt
 000001E9  E8 00000000 E	  call		CrLf

 000001EE  BA 00000208 R	  mov		EDX, OFFSET minNum		; Min number
 000001F3  E8 00000000 E	  call		WriteString
 000001F8  A1 000001D7 R	  mov		EAX, min
 000001FD  E8 00000000 E	  call		WriteInt
 00000202  E8 00000000 E	  call		CrLf

 00000207  BA 00000225 R	  mov		EDX, OFFSET sumNum		; Sum of valid numbers
 0000020C  E8 00000000 E	  call		WriteString
 00000211  A1 000001DB R	  mov		EAX, sum
 00000216  E8 00000000 E	  call		WriteInt
 0000021B  E8 00000000 E	  call		CrLf

 00000220  BA 00000246 R	  mov		EDX, OFFSET avgNum		; Average of numbers
 00000225  E8 00000000 E	  call		WriteString
 0000022A  A1 000001DF R	  mov		EAX, avg
 0000022F  E8 00000000 E	  call		WriteInt
 00000234  E8 00000000 E	  call		CrLf

 00000239  EB 00		  jmp		_goodbye

				; -----------------------------
				; Say goodbye to the user when the program ends.

				; -----------------------------

 0000023B			_goodbye:
 0000023B  BA 000002C3 R	  mov		EDX, OFFSET goodbye
 00000240  E8 00000000 E	  call		WriteString
 00000245  BA 000001BE R	  mov		EDX, OFFSET userName
 0000024A  E8 00000000 E	  call		WriteString

					Invoke ExitProcess,0			; exit to operating system
 0000024F  6A 00	   *	    push   +000000000h
 00000251  E8 00000000 E   *	    call   ExitProcess
 00000256			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30154.0	    07/22/24 18:18:04
<Project 3 - Data Validation, Looping, and Constants     (Pr  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002F1 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000256 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000256 Public STDCALL
  _whileNumIsNeg . . . . . . . .	L Near	 000000D9 _TEXT	
  _initialStart  . . . . . . . .	L Near	 000000ED _TEXT	
  _validateData  . . . . . . . .	L Near	 0000011B _TEXT	
  _updateData  . . . . . . . . .	L Near	 0000012F _TEXT	
  _updateMin . . . . . . . . . .	L Near	 0000015A _TEXT	
  _updateMax . . . . . . . . . .	L Near	 00000164 _TEXT	
  _error . . . . . . . . . . . .	L Near	 0000016E _TEXT	
  _zeroNumbers . . . . . . . . .	L Near	 00000182 _TEXT	
  _endWhile  . . . . . . . . . .	L Near	 00000196 _TEXT	
  _displayResults  . . . . . . .	L Near	 000001B2 _TEXT	
  _goodbye . . . . . . . . . . .	L Near	 0000023B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LOWBOUND_1 . . . . . . . . . . .	Number	 -000000C8h   
LOWBOUND_3 . . . . . . . . . . .	Number	 -00000032h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UPBOUND_2  . . . . . . . . . . .	Number	 -00000064h   
UPBOUND_4  . . . . . . . . . . .	Number	 -00000001h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgNum . . . . . . . . . . . . .	Byte	 00000246 _DATA	
avg  . . . . . . . . . . . . . .	DWord	 000001DF _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
count  . . . . . . . . . . . . .	DWord	 000001E3 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorMsg . . . . . . . . . . . .	Byte	 0000025E _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000002C3 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greetings_1  . . . . . . . . . .	Byte	 00000118 _DATA	
inputValue . . . . . . . . . . .	DWord	 000001CF _DATA	
intro_1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro_2  . . . . . . . . . . . .	Byte	 00000030 _DATA	
intro_3  . . . . . . . . . . . .	Byte	 00000093 _DATA	
intro_4  . . . . . . . . . . . .	Byte	 000000F9 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxNum . . . . . . . . . . . . .	Byte	 000001EB _DATA	
max  . . . . . . . . . . . . . .	DWord	 000001D3 _DATA	
minNum . . . . . . . . . . . . .	Byte	 00000208 _DATA	
min  . . . . . . . . . . . . . .	DWord	 000001D7 _DATA	
noNumMsg . . . . . . . . . . . .	Byte	 0000028B _DATA	
prompt_1 . . . . . . . . . . . .	Byte	 00000126 _DATA	
prompt_2 . . . . . . . . . . . .	Byte	 0000013A _DATA	
prompt_3 . . . . . . . . . . . .	Byte	 0000016D _DATA	
prompt_4 . . . . . . . . . . . .	Byte	 000001AF _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
remainder  . . . . . . . . . . .	DWord	 000001E7 _DATA	
sumNum . . . . . . . . . . . . .	Byte	 00000225 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 000001DB _DATA	
userName . . . . . . . . . . . .	Byte	 000001BE _DATA	
validMsg_2 . . . . . . . . . . .	Byte	 0000027B _DATA	
validMsg . . . . . . . . . . . .	Byte	 0000026E _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
