Microsoft (R) Macro Assembler Version 14.29.30154.0	    08/06/24 20:57:45
<Arrays, Addressing, and Stack-Passed Parameters     (Proj5_  Page 1 - 1


				TITLE Arrays, Addressing, and Stack-Passed Parameters     (Proj5_diaztr.asm)

				; Author: Troy Diaz
				; Last Modified: 8/11/24
				; OSU email address: diaztr@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 5                Due Date: 8/11/24
				; Description: MASM program that produces random numbers in an pre-defined
				; sized array. Bounds of random numbers are also set. This program then sorts
				; this random array, prints the median number, and the frequency of numbers. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 000000C8			ARRAYSIZE = 200
 = 0000000F			LO = 15
 = 00000032			HI = 50

 00000000			.data

 00000000 47 65 6E 65 72	titleMsg		BYTE "Generating, Sorting, and Counting Random integers!",0
	   61 74 69 6E 67
	   2C 20 53 6F 72
	   74 69 6E 67 2C
	   20 61 6E 64 20
	   43 6F 75 6E 74
	   69 6E 67 20 52
	   61 6E 64 6F 6D
	   20 69 6E 74 65
	   67 65 72 73 21
	   00
 00000033 50 72 6F 67 72	authorCred		BYTE "Programmed By Troy Diaz",0
	   61 6D 6D 65 64
	   20 42 79 20 54
	   72 6F 79 20 44
	   69 61 7A 00

 0000004B 54 68 69 73 20	listrandMsg		BYTE "This program generates 200 random integers between 15 and 50, inclusive.",0
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 32 30
	   30 20 72 61 6E
	   64 6F 6D 20 69
	   6E 74 65 67 65
	   72 73 20 62 65
	   74 77 65 65 6E
	   20 31 35 20 61
	   6E 64 20 35 30
	   2C 20 69 6E 63
	   6C 75 73 69 76
	   65 2E 00
 00000094 49 74 20 74 68	displayMsg1		BYTE "It then displays the original list, sorts the list, displays the median value of the list, ",0
	   65 6E 20 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20 6F 72 69 67
	   69 6E 61 6C 20
	   6C 69 73 74 2C
	   20 73 6F 72 74
	   73 20 74 68 65
	   20 6C 69 73 74
	   2C 20 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   6D 65 64 69 61
	   6E 20 76 61 6C
	   75 65 20 6F 66
	   20 74 68 65 20
	   6C 69 73 74 2C
	   20 00
 000000F0 64 69 73 70 6C	displayMsg2		BYTE "displays the list sorted ascending order, and finally displays the number of instances of each ",0
	   61 79 73 20 74
	   68 65 20 6C 69
	   73 74 20 73 6F
	   72 74 65 64 20
	   61 73 63 65 6E
	   64 69 6E 67 20
	   6F 72 64 65 72
	   2C 20 61 6E 64
	   20 66 69 6E 61
	   6C 6C 79 20 64
	   69 73 70 6C 61
	   79 73 20 74 68
	   65 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 69 6E 73
	   74 61 6E 63 65
	   73 20 6F 66 20
	   65 61 63 68 20
	   00
 00000150 67 65 6E 65 72	displayMsg3		BYTE "generated value, starting with the number of lowest.",0
	   61 74 65 64 20
	   76 61 6C 75 65
	   2C 20 73 74 61
	   72 74 69 6E 67
	   20 77 69 74 68
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   6C 6F 77 65 73
	   74 2E 00

 00000185 59 6F 75 72 20	unsortedMsg		BYTE "Your unsorted random numbers: ",0
	   75 6E 73 6F 72
	   74 65 64 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 000001A4 59 6F 75 72 20	sortedMsg		BYTE "Your sorted random numbers: ",0
	   73 6F 72 74 65
	   64 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 3A 20 00
 000001C1 54 68 65 20 6D	medianMsg		BYTE "The median value of the array: ",0
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 68 65 20 61
	   72 72 61 79 3A
	   20 00
 000001E1 59 6F 75 72 20	countMsg		BYTE "Your list of instances of each generated number, starting with the smallest value: ",0
	   6C 69 73 74 20
	   6F 66 20 69 6E
	   73 74 61 6E 63
	   65 73 20 6F 66
	   20 65 61 63 68
	   20 67 65 6E 65
	   72 61 74 65 64
	   20 6E 75 6D 62
	   65 72 2C 20 73
	   74 61 72 74 69
	   6E 67 20 77 69
	   74 68 20 74 68
	   65 20 73 6D 61
	   6C 6C 65 73 74
	   20 76 61 6C 75
	   65 3A 20 00
 00000235 20 00			tabMsg			BYTE " ",0

 00000237  000000C8 [		randArray		DWORD ARRAYSIZE DUP(?)		; Create array with size of ARRAYSIZE
	    00000000
	   ]
 00000557  00000023 [		freqArray		DWORD (HI-LO) DUP(?)		; Array to hold all elements visited, size of all unqiue numbers in randArray
	    00000000
	   ]
 000005E3 00000000		sizeofArray		DWORD ?						; Hold size of given array
 000005E7 00000000		uniqueNums      DWORD ?                     ; HI - LO
 000005EB 00000000		lineCount		DWORD ?						; Count of numbers per line

 000005EF 47 6F 6F 64 62	goodbyeMsg		BYTE "Goodbye, and thanks for using my program!",0
	   79 65 2C 20 61
	   6E 64 20 74 68
	   61 6E 6B 73 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   6D 79 20 70 72
	   6F 67 72 61 6D
	   21 00

 00000000			.code
 00000000			main PROC

				; Initialize variables
 00000000  C7 05 000005E7 R	  mov           uniqueNums, 0
	   00000000
 0000000A  C7 05 000005EB R	  mov           lineCount, 0
	   00000000
 00000014  C7 05 000005E3 R	  mov			sizeofArray, 0
	   00000000

 0000001E  68 000000C8		  push			LENGTHOF randArray
 00000023  68 00000237 R	  push          OFFSET randArray
 00000028  E8 0000011B		  call          initArray			; Call = 4 Bytes, 4*2=8 Bytes to return

 0000002D  6A 23		  push			LENGTHOF freqArray
 0000002F  68 00000557 R	  push          OFFSET freqArray
 00000034  E8 0000010F		  call          initArray           ; Call = 4 Bytes, 4*2=8 Bytes to return

				; Introduction
 00000039  68 00000000 R	  push			OFFSET titleMsg
 0000003E  68 00000033 R	  push			OFFSET authorCred
 00000043  68 0000004B R	  push			OFFSET listrandMsg
 00000048  68 00000094 R	  push			OFFSET displayMsg1
 0000004D  68 000000F0 R	  push			OFFSET displayMsg2
 00000052  68 00000150 R	  push			OFFSET displayMsg3
 00000057  E8 00000095		  call			introduction        ; Call = 4 Bytes, 4*6 = 24 Bytes to return

				; Fill array with random numbers
 0000005C  E8 00000000 E	  call			Randomize
 00000061  68 00000237 R	  push			OFFSET randArray
 00000066  E8 000000F5		  call			fillArray           ; Call = 4 Bytes, 4 Bytes to return

				; Display unsorted array
 0000006B  68 000000C8		  push			LENGTHOF randArray
 00000070  68 00000185 R	  push			OFFSET unsortedMsg
 00000075  68 00000237 R	  push			OFFSET randArray
 0000007A  68 00000235 R	  push			OFFSET tabMsg
 0000007F  E8 00000105		  call			displayList         ; Call = 4 Bytes, 4*4 = 16 Bytes to return

				; Sort array
 00000084  68 00000237 R	  push			OFFSET randArray
 00000089  E8 00000149		  call			sortList            ; Call = 4 Bytes, 4 Bytes to return

				; Display median of sorted array
 0000008E  68 00000237 R	  push			OFFSET randArray
 00000093  68 000001C1 R	  push			OFFSET medianMsg
 00000098  E8 00000183		  call			displayMedian		; Call = 4 Bytes, 4*2 = 8 Bytes to return

				; Display sorted array
 0000009D  68 000000C8		  push			LENGTHOF randArray
 000000A2  68 000001A4 R	  push			OFFSET sortedMsg
 000000A7  68 00000237 R	  push			OFFSET randArray
 000000AC  68 00000235 R	  push			OFFSET tabMsg
 000000B1  E8 000000D3		  call			displayList			; Call = 4 Bytes, 4*4 = 16 Bytes to return

				; Fill array frequency
 000000B6  68 000005E7 R	  push          OFFSET uniqueNums
 000000BB  68 00000557 R	  push			OFFSET freqArray
 000000C0  68 00000237 R	  push			OFFSET randArray
 000000C5  E8 000001A7		  call			countList			; Call = 4 Bytes, 4*3 = 12 Bytes to return

				; Display array counts
 000000CA  6A 23		  push			LENGTHOF freqArray
 000000CC  68 000001E1 R	  push			OFFSET countMsg 
 000000D1  68 00000557 R	  push			OFFSET freqArray 
 000000D6  68 00000235 R	  push			OFFSET tabMsg
 000000DB  E8 000000A9		  call			displayList			; Call = 4 Bytes, 4*4 = 16 Bytes to return

				; Say goodbye to user
 000000E0  68 000005EF R	  push			OFFSET goodbyeMsg
 000000E5  E8 000001CF		  call			farewell			; Call = 4 Bytes, 4 Bytes to return

					Invoke ExitProcess,0			; exit to operating system
 000000EA  6A 00	   *	    push   +000000000h
 000000EC  E8 00000000 E   *	    call   ExitProcess
 000000F1			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: Introduction
				; 
				; Introduces the program's functionality to the user. This program will print out
				; random numbers of an array with a predefined size. This array will then be sorted 
				; in ascending values and display the median and counts of the array. 
				;
				; Preconditions: Needs following variables that are string bytes.
				; titleMsg	- Title of program
				; authorCred - Author of program
				; listrandMsg - Describes how many random integers are in this array.
				; displayMsg1 - Following three describe how these integers will be displayed and sorted.
				; displayMsg2
				; displayMsg3
				;
				; Postconditions: none
				;
				; Receives: none
				; 
				; returns: Displays introductory message explaining functionality of the program
				; to user.
				; ---------------------------------------------------------------------------------

 000000F1			introduction PROC
 000000F1  55			  push		 EBP
 000000F2  8B EC		  mov		 EBP, ESP			; Preserve registers

 000000F4  8B 55 1C		  mov		 EDX, [EBP + 28]	; Addresses grow upward on stack, display messages by going down 4 Bytes (TYPE DWORD)
 000000F7  E8 00000000 E	  call		 WriteString
 000000FC  E8 00000000 E	  call		 CrLf

 00000101  8B 55 18		  mov		 EDX, [EBP + 24] 
 00000104  E8 00000000 E	  call		 WriteString
 00000109  E8 00000000 E	  call		 CrLf

 0000010E  8B 55 14		  mov		 EDX, [EBP + 20] 
 00000111  E8 00000000 E	  call		 WriteString
 00000116  E8 00000000 E	  call		 CrLf

 0000011B  8B 55 10		  mov		 EDX, [EBP + 16] 
 0000011E  E8 00000000 E	  call		 WriteString
 00000123  E8 00000000 E	  call		 CrLf

 00000128  8B 55 0C		  mov		 EDX, [EBP + 12] 
 0000012B  E8 00000000 E	  call		 WriteString
 00000130  E8 00000000 E	  call		 CrLf

 00000135  8B 55 08		  mov		 EDX, [EBP + 8] 
 00000138  E8 00000000 E	  call		 WriteString
 0000013D  E8 00000000 E	  call		 CrLf

 00000142  8B E5		  mov		 ESP, EBP			; Restore original registers
 00000144  5D			  pop		 EBP

 00000145  C2 0018		  RET		 24					; 24 Bytes for pushing references onto stack
 00000148			introduction ENDP

				; ---------------------------------------------------------------------------------
				; Name: initArray
				; 
				; Initializes a given array with zeros.
				;
				; Preconditions: Array needs to be defined with size ARRAYSIZE.
				;
				; Postconditions: Array is filled with zeros.
				;
				; Receives: Array of DWORDS
				; 
				; returns: Initialized array with zeros.
				; ---------------------------------------------------------------------------------

 00000148			initArray   PROC
 00000148  55			  push		EBP
 00000149  8B EC		  mov		EBP, ESP			

 0000014B  8B 75 08		  mov       ESI, [EBP + 8]
 0000014E  B8 00000000		  mov       EAX, 0
 00000153  8B 4D 0C		  mov       ECX, [EBP + 12]		; Loop array size times

 00000156			_initLoop:
 00000156  89 06		  mov       [ESI], EAX
 00000158  E2 FC		  loop      _initLoop
				  
 0000015A  8B E5		  mov		ESP, EBP			
 0000015C  5D			  pop		EBP

 0000015D  C2 0008		  RET       8
 00000160			initArray   ENDP

				; ---------------------------------------------------------------------------------
				; Name: fillArray
				; 
				; Fills array with random integers from LO to HI. Calls RandomRange to
				; randomize integers.
				;
				; Preconditions: Given an array and ARRAYSIZE.
				;
				; Postconditions: Array is filled with random integers.
				;
				; Receives: Array of DWORDS.
				; 
				; returns: Array with random integers.
				; ---------------------------------------------------------------------------------

 00000160			fillArray	PROC
 00000160  55			  push		EBP
 00000161  8B EC		  mov		EBP, ESP		

 00000163  8B 75 08		  mov       ESI, [EBP + 8]		; Address of array
 00000166  B9 000000C8		  mov       ECX, ARRAYSIZE		; Size of array for loop

 0000016B			_fillLoop:
 0000016B  B8 00000032		  mov       EAX, HI				; Set bounds of element
 00000170  40			  inc       EAX
 00000171  83 E8 0F		  sub       EAX, LO

 00000174  E8 00000000 E	  call      RandomRange			; Get random number
 00000179  83 C0 0F		  add       EAX, LO				; Ensure number is greater than lo
 0000017C  89 06		  mov       [ESI], EAX			; Store element
 0000017E  83 C6 04		  add       ESI, TYPE DWORD		; Move to next index
 00000181  E2 E8		  loop      _fillLoop

 00000183  8B E5		  mov       ESP, EBP
 00000185  5D			  pop       EBP

 00000186  C2 0004		  RET       4               
 00000189			fillArray	ENDP

				; ---------------------------------------------------------------------------------
				; Name: displayList
				; 
				; Prints 20 integers in an array and moves to the next line after printing all
				; integers in that array. 
				;
				; Preconditions: Given an array, space character, message to declare if it's
				; a unsorted or sorted array.
				;
				; Postconditions: Displays an arrays contents, 20 integers per line.
				;
				; Receives: Array, space character, sorted/unsorted message.
				; 
				; returns: Displays an arrays integers.
				; ---------------------------------------------------------------------------------

 00000189			displayList	PROC
 00000189  55			  push		EBP
 0000018A  8B EC		  mov		EBP, ESP

 0000018C  8B 75 0C		  mov		ESI, [EBP + 12]		; Address of array
 0000018F  8B 4D 14		  mov		ECX, [EBP + 20]		; Loop LENGTHOF array
				  
 00000192  E8 00000000 E	  call      CrLf
 00000197  8B 55 10		  mov       EDX, [EBP + 16]		; Declare if it's a unsorted/sorted/count array
 0000019A  E8 00000000 E	  call      WriteString
 0000019F  E8 00000000 E	  call      CrLf

 000001A4  BB 00000000		  mov		EBX, 0				; Counter to hold how many ints are printed in a line

 000001A9			_displayLoop:
 000001A9  8B 06		  mov       EAX, [ESI]			; Print current index
 000001AB  E8 00000000 E	  call      WriteDec

 000001B0  8B 55 08		  mov       EDX, [EBP + 8]		; Print space character
 000001B3  E8 00000000 E	  call      WriteString

 000001B8  43			  inc		EBX					; Increment count of numbers in a line
 000001B9  83 FB 14		  cmp		EBX, 20				; n = 20, print new line
 000001BC  74 07		  je		_newLine

 000001BE			_continueDisplay:				
 000001BE  83 C6 04		  add       ESI, TYPE DWORD		; Move to next integer
 000001C1  E2 E6		  loop      _displayLoop
 000001C3  EB 0C		  jmp		_enddisplayListProc

 000001C5			_newLine:
 000001C5  BB 00000000		  mov		EBX, 0				; Reset counter
 000001CA  E8 00000000 E	  call		CrLf
 000001CF  EB ED		  jmp		_continueDisplay
				  
 000001D1			_enddisplayListProc:
 000001D1  8B E5		  mov       ESP, EBP
 000001D3  5D			  pop       EBP
				  
 000001D4  C2 0010		  RET		16
 000001D7			displayList	ENDP

				; ---------------------------------------------------------------------------------
				; Name: sortList
				; 
				; Procedure to sort a given array in ascending order. Based on Bubble Sort.
				;
				; Preconditions: Array with DWORDS.
				;
				; Postconditions: Sorted array in ascending order, 1 < 2 < 3...
				;
				; Receives: Array
				; 
				; returns: Sorted array
				; ---------------------------------------------------------------------------------

 000001D7			sortList	PROC
 000001D7  55			  push		EBP
 000001D8  8B EC		  mov       EBP, ESP

 000001DA			_outerLoop:
 000001DA  8B 75 08		  mov		ESI, [EBP + 8]			; Address of array	
 000001DD  B9 000000C8		  mov		ECX, ARRAYSIZE			; Loop ARRAYSIZE

 000001E2  49			  dec		ECX						; Pass through array of ARRAYSIZE - 1 times			

 000001E3  BA 00000000		  mov		EDX, 0					; Flag to see if ints swapped

 000001E8			_innerLoop:
 000001E8  8B 06		  mov		EAX, [ESI]				; Compare element and increment second elem
 000001EA  3B 46 04		  cmp		EAX, [ESI + 4]			; If <=, don't swap since ascending order
 000001ED  7E 0B		  jle		_noSwap

 000001EF  56			  push		ESI
 000001F0  E8 00000015		  call		exchangeElements		; Sub procedure to swap elems
 000001F5  BA 00000001		  mov		EDX, 1					; Enable flag
 000001FA			_noSwap:
 000001FA  83 C6 04		  add		ESI, TYPE DWORD			; Increment index
 000001FD  E2 E9		  loop		_innerLoop

 000001FF  83 FA 01		  cmp		EDX, 1
 00000202  74 D6		  je		_outerLoop

 00000204			_endsortListProc:
				  
 00000204  8B E5		  mov		ESP, EBP
 00000206  5D			  pop		EBP

 00000207  C2 0008		  RET		8
 0000020A			sortList	ENDP

				; ---------------------------------------------------------------------------------
				; Name: exchangeElements
				; 
				; Swaps two elements.
				;
				; Preconditions: Pushed ESI register contianing address of current element
				;
				; Postconditions: Two elements are swapped, ESI and ESI + 4
				;
				; Receives: Address of currenet element, ESI 
				; 
				; returns: none
				; ---------------------------------------------------------------------------------

 0000020A			exchangeElements	PROC
 0000020A  55			  push				EBP
 0000020B  8B EC		  mov				EBP, ESP

 0000020D  60			  pushad							; Preserve all registers

 0000020E  8B 75 08		  mov				ESI, [EBP + 8]	; Restore address of current element
 00000211  8B 1E		  mov				EBX, [ESI]		; Get address of first and second element
 00000213  8B 46 04		  mov				EAX, [ESI + 4]
 00000216  89 5E 04		  mov				[ESI + 4], EBX	; Store first into second's index
 00000219  89 06		  mov				[ESI], EAX		; Store second into first's index

 0000021B  61			  popad								; Restore all registers

 0000021C  5D			  pop				EBP

 0000021D  C2 0004		  RET				4
 00000220			exchangeElements	ENDP

				; ---------------------------------------------------------------------------------
				; Name: displayMedian
				; 
				; Procedure to print the median of a sorted array.
				;
				; Preconditions: Array is sorted.
				;
				; Postconditions: Median value printed.
				;
				; Receives: Address of array and message to print.
				; 
				; returns: none.
				; ---------------------------------------------------------------------------------

 00000220			displayMedian	PROC
 00000220  55			  push			EBP
 00000221  8B EC		  mov			EBP, ESP

 00000223  8B 75 0C		  mov			ESI, [EBP + 12]			; Address of array
 00000226  B8 000000C8		  mov			EAX, ARRAYSIZE
 0000022B  BB 00000002		  mov			EBX, 2
 00000230  33 D2		  xor			EDX, EDX
 00000232  F7 F3		  div			EBX						; Divide array size by 2, hold remainer in EDX

 00000234  8B D8		  mov			EBX, EAX				; Store size in array

 00000236  83 FA 00		  cmp			EDX, 0					; Checking if size is odd
 00000239  75 16		  jne			_oddSize

 0000023B  8B 04 9E		  mov			EAX, [ESI + EBX * 4]	; For even sized arrays
 0000023E  8B CB		  mov			ECX, EBX
 00000240  41			  inc			ECX
 00000241  8B 14 8E		  mov			EDX, [ESI + ECX * 4]	
 00000244  03 C2		  add			EAX, EDX				; Calculate average of two middle elements
 00000246  BB 00000002		  mov			EBX, 2
 0000024B  33 D2		  xor			EDX, EDX
 0000024D  F7 F3		  div			EBX
 0000024F  EB 03		  jmp			_printMedian

 00000251			_oddSize:
 00000251  8B 04 9E		  mov			EAX, [ESI + EBX * 4]	; Get middle elemnt of array
				  
 00000254			_printMedian:
 00000254  E8 00000000 E	  call			CrLf
 00000259  8B 55 08		  mov			EDX, [EBP + 8]
 0000025C  E8 00000000 E	  call			WriteString
 00000261  E8 00000000 E	  call			WriteDec				; Print median value
 00000266  E8 00000000 E	  call			CrLf

 0000026B  8B E5		  mov			ESP, EBP
 0000026D  5D			  pop			EBP

 0000026E  C2 0008		  RET			8
 00000271			displayMedian	ENDP

				; ---------------------------------------------------------------------------------
				; Name: countList
				; 
				; Procedure to print the frequency or count of each unique number in a set. LO - HI
				; number of unique numbers. For example, [1,1,1,2], 1: 3, 2: 1.
				;
				; Preconditions: randArray is sorted and freqArray is initialized.
				;
				; Postconditions: freqArray contains the frequency of all unique numbers of a given array/
				;
				; Receives: Array that is sorted and another array that is empty.
				; 
				; returns: Frequency in array.
				; ---------------------------------------------------------------------------------

 00000271			countList	PROC
 00000271  55			  push		EBP
 00000272  8B EC		  mov		EBP, ESP

 00000274  B8 00000032		  mov		EAX, HI							; Set up unique numbers, HI - LO	
 00000279  89 45 10		  mov		[EBP + 16], EAX
 0000027C  B8 0000000F		  mov		EAX, LO
 00000281  29 45 10		  sub		[EBP + 16], EAX
 00000284  33 C0		  xor		EAX, EAX            

 00000286  8B 75 08		  mov		ESI, [EBP + 8]					; Address of randArray
 00000289  8B 7D 0C		  mov		EDI, [EBP + 12]					; Address of freqArray
 0000028C  33 DB		  xor		EBX, EBX				

 0000028E  8B 4D 10		  mov		ECX, [EBP + 16]					; Move unique numbers for counter
 00000291			_initFreq:
 00000291  C7 04 9F		  mov		DWORD PTR [EDI + EBX * 4], 0	; Set freqArray to be 0 for all indices
	   00000000
 00000298  43			  inc		EBX
 00000299  E2 F6		  loop		_initFreq

 0000029B  33 DB		  xor		EBX, EBX						; Clear EBX counter

 0000029D			_countLoop:
 0000029D  8B 04 9E		  mov		EAX, [ESI + EBX * 4]			; Loading randArray[EBX] into EAX
 000002A0  83 E8 0F		  sub		EAX, LO							; Adjusting index to start 0 at LO
 000002A3  8B 14 87		  mov		EDX, [EDI + EAX * 4]			; Loading freqArray[EAX] into EDX
 000002A6  42			  inc		EDX								; Increment EDX and update value thats in freqArray[EAX]
 000002A7  89 14 87		  mov		[EDI + EAX*4], EDX
 000002AA  43			  inc		EBX								; Next index at randArray
 000002AB  81 FB 000000C8	  cmp		EBX, ARRAYSIZE
 000002B1  7C EA		  jl		_countLoop						; Loop ARRAYSIZE times

 000002B3  8B E5		  mov		ESP, EBP
 000002B5  5D			  pop		EBP
				  
 000002B6  C2 000C		  RET		12                   
 000002B9			countList	ENDP

				; ---------------------------------------------------------------------------------
				; Name: farewell
				; 
				; Prints a goodbye message to user, indicating the program has ended.
				;
				; Preconditions: BYTE message 
				;
				; Postconditions: Goodbye message is displayed.
				;
				; Receives: none
				; 
				; returns: none
				; ---------------------------------------------------------------------------------

 000002B9			farewell	PROC
 000002B9  55			  push		EBP
 000002BA  8B EC		  mov		EBP, ESP

 000002BC  E8 00000000 E	  call		CrLf
 000002C1  8B 55 08		  mov		EDX, [EBP + 8]
 000002C4  E8 00000000 E	  call		WriteString
 000002C9  E8 00000000 E	  call		CrLf

 000002CE  8B E5		  mov		ESP, EBP
 000002D0  5D			  pop		EBP

 000002D1  C2 0008		  RET		8
 000002D4			farewell	ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30154.0	    08/06/24 20:57:45
<Arrays, Addressing, and Stack-Passed Parameters     (Proj5_  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000619 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002D4 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
countList  . . . . . . . . . . .	P Near	 00000271 _TEXT	Length= 00000048 Public STDCALL
  _initFreq  . . . . . . . . . .	L Near	 00000291 _TEXT	
  _countLoop . . . . . . . . . .	L Near	 0000029D _TEXT	
displayList  . . . . . . . . . .	P Near	 00000189 _TEXT	Length= 0000004E Public STDCALL
  _displayLoop . . . . . . . . .	L Near	 000001A9 _TEXT	
  _continueDisplay . . . . . . .	L Near	 000001BE _TEXT	
  _newLine . . . . . . . . . . .	L Near	 000001C5 _TEXT	
  _enddisplayListProc  . . . . .	L Near	 000001D1 _TEXT	
displayMedian  . . . . . . . . .	P Near	 00000220 _TEXT	Length= 00000051 Public STDCALL
  _oddSize . . . . . . . . . . .	L Near	 00000251 _TEXT	
  _printMedian . . . . . . . . .	L Near	 00000254 _TEXT	
exchangeElements . . . . . . . .	P Near	 0000020A _TEXT	Length= 00000016 Public STDCALL
farewell . . . . . . . . . . . .	P Near	 000002B9 _TEXT	Length= 0000001B Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 00000160 _TEXT	Length= 00000029 Public STDCALL
  _fillLoop  . . . . . . . . . .	L Near	 0000016B _TEXT	
initArray  . . . . . . . . . . .	P Near	 00000148 _TEXT	Length= 00000018 Public STDCALL
  _initLoop  . . . . . . . . . .	L Near	 00000156 _TEXT	
introduction . . . . . . . . . .	P Near	 000000F1 _TEXT	Length= 00000057 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000F1 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 000001D7 _TEXT	Length= 00000033 Public STDCALL
  _outerLoop . . . . . . . . . .	L Near	 000001DA _TEXT	
  _innerLoop . . . . . . . . . .	L Near	 000001E8 _TEXT	
  _noSwap  . . . . . . . . . . .	L Near	 000001FA _TEXT	
  _endsortListProc . . . . . . .	L Near	 00000204 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 00000032h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Fh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
authorCred . . . . . . . . . . .	Byte	 00000033 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
countMsg . . . . . . . . . . . .	Byte	 000001E1 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
displayMsg1  . . . . . . . . . .	Byte	 00000094 _DATA	
displayMsg2  . . . . . . . . . .	Byte	 000000F0 _DATA	
displayMsg3  . . . . . . . . . .	Byte	 00000150 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
freqArray  . . . . . . . . . . .	DWord	 00000557 _DATA	
goodbyeMsg . . . . . . . . . . .	Byte	 000005EF _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lineCount  . . . . . . . . . . .	DWord	 000005EB _DATA	
listrandMsg  . . . . . . . . . .	Byte	 0000004B _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
medianMsg  . . . . . . . . . . .	Byte	 000001C1 _DATA	
randArray  . . . . . . . . . . .	DWord	 00000237 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sizeofArray  . . . . . . . . . .	DWord	 000005E3 _DATA	
sortedMsg  . . . . . . . . . . .	Byte	 000001A4 _DATA	
tabMsg . . . . . . . . . . . . .	Byte	 00000235 _DATA	
titleMsg . . . . . . . . . . . .	Byte	 00000000 _DATA	
uniqueNums . . . . . . . . . . .	DWord	 000005E7 _DATA	
unsortedMsg  . . . . . . . . . .	Byte	 00000185 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
