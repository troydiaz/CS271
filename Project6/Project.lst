Microsoft (R) Macro Assembler Version 14.29.30154.0	    08/13/24 12:57:40
<Project 6 - String Primitives and Macros     (Proj6_diaztr.  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros     (Proj6_diaztr.asm)

				; Author: Troy Diaz
				; Last Modified: 8/16/24
				; OSU email address: diaztr@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date: 8/16/24
				; Description: MASM program to take in signed decimal integers from a user and
				; display the sum, average, and list of numbers entered. The numbers are first strings that
				; converts to integers.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Displays a prompt for a user and gets user input. Takes in a string as user input.
				;
				; Preconditions: EDX and ECX is used for ReadString.
				;
				; Receives:
				; prompt = string to enter a number
				; buffer = user input
				; inputLen = length of user input 
				;
				; returns: none.
				; ---------------------------------------------------------------------------------
				mGetString		MACRO prompt, buffer, inputLen
				  pushad

				  mov			EDX, prompt
				  call			WriteString

				  mov			EDX, buffer
				  mov			ECX, inputLen
				  call			ReadString

				  popad
				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Prints a string, followed by a space character.
				;
				; Preconditions: EDX is used for WriteString.
				;
				; Receives:
				; printString = string (signed integers)
				; spaceChar = character ' '
				;
				; returns: printed string.
				; ---------------------------------------------------------------------------------
				mDisplayString	MACRO printString, spaceChar
				  pushad

				  mov			EDX, printString
				  call			WriteString

				  mov			EDX, spaceChar
				  call			WriteString

				  popad
				ENDM

 = 0000000A			ARRAYSIZE = 10			; 10 signed integers
 = 0000000B			MAX_USER_INPUT = 11		; Maximum integer length for user input

 00000000			.data

 00000000 50 52 4F 47 52	titleMsg		BYTE "PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedure",0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 00
 0000003C 57 72 69 74 74	authorMsg		BYTE "Written by: Troy Diaz",0
	   65 6E 20 62 79
	   3A 20 54 72 6F
	   79 20 44 69 61
	   7A 00

 00000052 50 6C 65 61 73	instructionMsg	BYTE "Please provide 10 signed decimal integers.",0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 00
 0000007D 45 61 63 68 20	descMsg_1		BYTE "Each number needs to be small enough to fit inside a 32 bit register. ",0
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   00
 000000C4 41 66 74 65 72	descMsg_2		BYTE "After you have finished inputting the raw numbers I will display a list of the integers, ",0
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 00
 0000011E 74 68 65 69 72	descMsg_3		BYTE "their sum, and their average value.",0
	   20 73 75 6D 2C
	   20 61 6E 64 20
	   74 68 65 69 72
	   20 61 76 65 72
	   61 67 65 20 76
	   61 6C 75 65 2E
	   00

 00000142 50 6C 65 61 73	signedPrompt	BYTE "Please enter a asigned number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   61 73 69 67 6E
	   65 64 20 6E 75
	   6D 62 65 72 3A
	   20 00
 00000162 45 52 52 4F 52	errorMsg		BYTE "ERROR: You did not enter a signed number or your number was too big.",0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 00
 000001A7 50 6C 65 61 73	retryPrompt		BYTE "Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00

 000001BA 54 68 65 20 73	sumMsg			BYTE "The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 000001D8 54 68 65 20 74	avgMsg			BYTE "The truncated average is: ",0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 000001F3 59 6F 75 20 65	displayNums		BYTE "You entered the following numbers: ",0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 00000217 20 20 00		tabMsg			BYTE "  ",0
 0000021A  0000000B [		userInput		BYTE  MAX_USER_INPUT DUP(?)
	    00
	   ]

 00000225  0000000A [		numsArray		SDWORD ARRAYSIZE DUP(?)
	    00000000
	   ]
 0000024D 00000000		sumNum			SDWORD ?
 00000251 00000000		avgNum			SDWORD ?
 00000255 00000000		userInputLen	SDWORD ?
 00000259 00000000		negSign			SDWORD ?
 0000025D 00000000		buffer			SDWORD ?

 00000261 54 68 61 6E 6B	goodbyeMsg		BYTE "Thanks for playing!",0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00

 00000000			.code
 00000000			main PROC

				; Introduction
 00000000  68 00000000 R	  push			OFFSET titleMsg
 00000005  68 0000003C R	  push			OFFSET authorMsg
 0000000A  68 00000052 R	  push			OFFSET instructionMsg
 0000000F  68 0000007D R	  push			OFFSET descMsg_1
 00000014  68 000000C4 R	  push			OFFSET descMsg_2
 00000019  68 0000011E R	  push			OFFSET descMsg_3
 0000001E  E8 0000013E		  call			introduction			; 24 Bytes to return

				; Get user's signed integers
 00000023  68 000001A7 R	  push			OFFSET retryPrompt
 00000028  68 00000162 R	  push			OFFSET errorMsg
 0000002D  68 00000142 R	  push			OFFSET signedPrompt
 00000032  68 00000259 R	  push			OFFSET negSign
 00000037  68 00000255 R	  push			OFFSET userInputLen
 0000003C  68 0000021A R	  push			OFFSET userInput
 00000041  68 00000225 R	  push			OFFSET numsArray
 00000046  E8 00000061		  call			ReadVal					; 28 Bytes to return

				; Display user's signed integers
 0000004B  68 000001F3 R	  push			OFFSET displayNums
 00000050  68 00000217 R	  push			OFFSET tabMsg
 00000055  68 00000225 R	  push			OFFSET numsArray
 0000005A  E8 0000007F		  call			WriteVal				; 12 Bytes to return

				; Display sum of numbers
 0000005F  68 0000025D R	  push			OFFSET buffer
 00000064  68 00000217 R	  push			OFFSET tabMsg
 00000069  68 00000225 R	  push			OFFSET numsArray
 0000006E  68 0000024D R	  push			OFFSET sumNum
 00000073  68 000001BA R	  push			OFFSET sumMsg
 00000078  E8 0000009F		  call			displaySum				; 20 Bytes to return

				; Display avgerage of numbers
 0000007D  68 0000025D R	  push			OFFSET buffer
 00000082  68 00000217 R	  push			OFFSET tabMsg
 00000087  68 00000225 R	  push			OFFSET numsArray
 0000008C  68 00000251 R	  push			OFFSET avgNum
 00000091  68 000001D8 R	  push			OFFSET avgMsg
 00000096  E8 000000A6		  call			displayAvg				; 20 Bytes to return

				; Say goodbye to user
 0000009B  68 00000261 R	  push			OFFSET goodbyeMsg
 000000A0  E8 00000123		  call			farewell				; 4 Bytes to return

					Invoke ExitProcess,0	; exit to operating system
 000000A5  6A 00	   *	    push   +000000000h
 000000A7  E8 00000000 E   *	    call   ExitProcess
 000000AC			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				; 
				; Gets user input and stores it into an array. 
				;
				; Preconditions: none.
				;
				; Postconditions: Fills an array with SDWORDs.
				;
				; Receives: 
				; [EBP + 32] = retryPrompt, rety message to indicate previous input was bad
				; [EBP + 28] = errorMsg, handling bad user input
				; [EBP + 24] = signedPrompt, message to get user input
				; [EBP + 20] = userInputLen, length of user input
				; [EBP + 16] = negSign, flag to set negative sign
				; [EBP + 12] = userinput, stores user's number
				; [EBP + 8] = numsArray, array to hold user numbers
				; 
				; returns: an array with ARRAYSIZE elements.
				; ---------------------------------------------------------------------------------
 000000AC			ReadVal			 PROC
 000000AC  55			  push			 EBP
 000000AD  8B EC		  mov			 EBP, ESP
				  
 000000AF  B9 0000000A		  mov			 ECX, ARRAYSIZE			; Looping ARRAYSIZE many times
 000000B4  8B 75 08		  mov			 ESI, [EBP + 8]			; Address of numsArray

 000000B7			_displayPrompt:
				  mGetString	 [EBP + 24], [EBP + 12], MAX_USER_INPUT
 000000B7  60		     1	  pushad
 000000B8  8B 55 18	     1	  mov			EDX, [EBP + 24]
 000000BB  E8 00000000 E     1	  call			WriteString
 000000C0  8B 55 0C	     1	  mov			EDX, [EBP + 12]
 000000C3  B9 0000000B	     1	  mov			ECX, MAX_USER_INPUT
 000000C8  E8 00000000 E     1	  call			ReadString
 000000CD  61		     1	  popad
 000000CE  8B 45 0C		  mov			 EAX, [EBP + 12]		
 000000D1  89 06		  mov			 [ESI], EAX				; Store string into array
 000000D3  83 C6 04		  add			 ESI, TYPE SDWORD		; Move to next index
 000000D6  E2 DF		  loop			 _displayPrompt

 000000D8  8B E5		  mov			 ESP, EBP
 000000DA  5D			  pop			 EBP

 000000DB  C2 001C		  RET			 28
 000000DE			ReadVal			 ENDP

				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				; 
				; Prints the values inside a given array.
				;
				; Preconditions: numsArray is not empty.
				;
				; Postconditions: every element in numsArray is printed.
				;
				; Receives: 
				;
				; [EBP + 16] = displayNums, message to user that numbers from array is printed
				; [EBP + 12] = tabMsg, space character
				; [EBP + 8] = numsArray, array that holds user numbers
				; 
				; returns: elements printed from numsArray.
				; ---------------------------------------------------------------------------------

 000000DE			WriteVal			PROC
 000000DE  55			  push				EBP
 000000DF  8B EC		  mov				EBP, ESP

 000000E1  8B 75 08		  mov				ESI, [EBP + 8]		; Address of numsArray
 000000E4  B9 0000000A		  mov				ECX, ARRAYSIZE

 000000E9  E8 00000000 E	  call				CrLf
 000000EE  8B 55 10		  mov				EDX, [EBP + 16]	
 000000F1  E8 00000000 E	  call				WriteString
 000000F6  E8 00000000 E	  call				CrLf

 000000FB			_displayLoop:
				  mDisplayString	[ESI], [EBP + 12]	; Print string
 000000FB  60		     1	  pushad
 000000FC  8B 16	     1	  mov			EDX, [ESI]
 000000FE  E8 00000000 E     1	  call			WriteString
 00000103  8B 55 0C	     1	  mov			EDX, [EBP + 12]
 00000106  E8 00000000 E     1	  call			WriteString
 0000010B  61		     1	  popad
 0000010C  83 C6 04		  add				ESI, TYPE SDWORD	; Move through array
 0000010F  E2 EA		  loop				_displayLoop

 00000111  E8 00000000 E	  call				CrLf

 00000116  8B E5		  mov				ESP, EBP
 00000118  5D			  pop				EBP

 00000119  C2 000C		  RET				12
 0000011C			WriteVal			ENDP

				; ---------------------------------------------------------------------------------
				; Name: displaySum
				; 
				; Procedure to print the sum of numbers in an array.
				;
				; Preconditions: numsArray is not empty.
				;
				; Postconditions: sum is printed.
				;
				; Receives: 
				; 
				; [EBP + 24] = buffer, reading from digit to next (convert Str to Int)
				; [EBP + 20] = tabMsg, space character
				; [EBP + 16] = numsArray, array that holds user numbers
				; [EBP + 12] = sumNum, number to hold accumulated sum
				; [EBP + 8] = sumMsg, message to indicate sum is printed
				; 
				; returns: sum of numbers.
				; ---------------------------------------------------------------------------------

 0000011C			displaySum		PROC
 0000011C  55			  push			EBP
 0000011D  8B EC		  mov			EBP, ESP

 0000011F  8B 55 08		  mov			EDX, [EBP + 8]
 00000122  E8 00000000 E	  call			WriteString
 00000127  E8 00000000 E	  call			CrLf

 0000012C  8B 75 10		  mov			ESI, [EBP + 16]		; Address of numsArray
 0000012F  B9 0000000A		  mov			ECX, ARRAYSIZE
 00000134			_calculateSum:
 00000134  03 06		  add			EAX, [ESI]			; Accumulate sum
 00000136  83 C6 04		  add			ESI, TYPE SDWORD	; Move through array
 00000139  E2 F9		  loop			_calculateSum
				 
 0000013B  8B E5		  mov			ESP, EBP
 0000013D  5D			  pop			EBP

 0000013E  C2 0014		  RET			20
 00000141			displaySum		ENDP

				; ---------------------------------------------------------------------------------
				; Name: displayAvg
				; 
				; Displays the average of numbers in an array.
				;
				; Preconditions: numsArray is not empty.
				;
				; Postconditions: average of numbers is printed.
				;
				; Receives: 
				; 
				; [EBP + 24] = buffer, reading from digit to next (convert Str to Int)
				; [EBP + 20] = tabMsg, space character
				; [EBP + 16] = numsArray, array that holds user numbers
				; [EBP + 12] = avgNum, number to hold average
				; [EBP + 8] = avgMsg, message to indicate average is printed
				; 
				; returns: average of numbers is displayed.
				; ---------------------------------------------------------------------------------

 00000141			displayAvg		PROC
 00000141  55			  push			EBP
 00000142  8B EC		  mov			EBP, ESP

				  mdisplayString	[EBP + 8], [EBP + 20]
 00000144  60		     1	  pushad
 00000145  8B 55 08	     1	  mov			EDX, [EBP + 8]
 00000148  E8 00000000 E     1	  call			WriteString
 0000014D  8B 55 14	     1	  mov			EDX, [EBP + 20]
 00000150  E8 00000000 E     1	  call			WriteString
 00000155  61		     1	  popad
 00000156  E8 00000000 E	  call			CrLf

 0000015B  8B E5		  mov			ESP, EBP
 0000015D  5D			  pop			EBP

 0000015E  C2 0004		  RET			4
 00000161			displayAvg		ENDP

				; ---------------------------------------------------------------------------------
				; Name: introduction
				; 
				; Introduces user to the program.
				;
				; Preconditions: none.
				;
				; Postconditions: Introduction and instructions is printed to user.
				;
				; Receives: 
				;
				; [EBP + 28] = titleMsg, title of program
				; [EBP + 24] = authorMsg, author of program
				; [EBP + 20] = instructionMsg, instruction to user to provide 10 signed ints
				; [EBP + 16] = descMsg_1, conditions of user input and what the program will do with the ints
				; [EBP + 12] = descMsg_2
				; [EBP + 8] = descMsg_3
				; 
				; returns: printed introduction to user.
				; ---------------------------------------------------------------------------------

 00000161			introduction	PROC
 00000161  55			  push			EBP
 00000162  8B EC		  mov			EBP, ESP

 00000164  8B 54 24 1C		  mov			EDX, [ESP + 28]
 00000168  E8 00000000 E	  call			WriteString
 0000016D  E8 00000000 E	  call			CrLf

 00000172  8B 54 24 18		  mov			EDX, [ESP + 24]
 00000176  E8 00000000 E	  call			WriteString
 0000017B  E8 00000000 E	  call			CrLf
 00000180  E8 00000000 E	  call			CrLf

 00000185  8B 54 24 14		  mov			EDX, [ESP + 20]
 00000189  E8 00000000 E	  call			WriteString
 0000018E  E8 00000000 E	  call			CrLf

 00000193  8B 54 24 10		  mov			EDX, [ESP + 16]
 00000197  E8 00000000 E	  call			WriteString
 0000019C  E8 00000000 E	  call			CrLf

 000001A1  8B 54 24 0C		  mov			EDX, [ESP + 12]
 000001A5  E8 00000000 E	  call			WriteString
 000001AA  E8 00000000 E	  call			CrLf

 000001AF  8B 54 24 08		  mov			EDX, [ESP + 8]
 000001B3  E8 00000000 E	  call			WriteString
 000001B8  E8 00000000 E	  call			CrLf
 000001BD  E8 00000000 E	  call			CrLf

 000001C2  8B E5		  mov			ESP, EBP
 000001C4  5D			  pop			EBP

 000001C5  C2 0018		  RET			24
 000001C8			introduction	ENDP

				; ---------------------------------------------------------------------------------
				; Name: farewell
				; 
				; Displays a goodbye message to user.
				;
				; Preconditions: none.
				;
				; Postconditions: Goodbye message is printed.
				;
				; Receives: 
				;
				; [EBP + 8] = goodbyeMsg, farewell to user
				; 
				; returns: Farewell message to indicate program has ended.
				; ---------------------------------------------------------------------------------

 000001C8			farewell		PROC
 000001C8  55			  push			EBP
 000001C9  8B EC		  mov			EBP, ESP

 000001CB  E8 00000000 E	  call			CrLf
 000001D0  8B 54 24 08		  mov			EDX, [ESP + 8]
 000001D4  E8 00000000 E	  call			WriteString
 000001D9  E8 00000000 E	  call			CrLf

 000001DE  8B E5		  mov			ESP, EBP
 000001E0  5D			  pop			EBP

 000001E1  C2 0004		  RET			4
 000001E4			farewell		ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30154.0	    08/13/24 12:57:40
<Project 6 - String Primitives and Macros     (Proj6_diaztr.  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000275 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001E4 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000AC _TEXT	Length= 00000032 Public STDCALL
  _displayPrompt . . . . . . . .	L Near	 000000B7 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000000DE _TEXT	Length= 0000003E Public STDCALL
  _displayLoop . . . . . . . . .	L Near	 000000FB _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayAvg . . . . . . . . . . .	P Near	 00000141 _TEXT	Length= 00000020 Public STDCALL
displaySum . . . . . . . . . . .	P Near	 0000011C _TEXT	Length= 00000025 Public STDCALL
  _calculateSum  . . . . . . . .	L Near	 00000134 _TEXT	
farewell . . . . . . . . . . . .	P Near	 000001C8 _TEXT	Length= 0000001C Public STDCALL
introduction . . . . . . . . . .	P Near	 00000161 _TEXT	Length= 00000067 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000AC Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_USER_INPUT . . . . . . . . .	Number	 0000000Bh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
authorMsg  . . . . . . . . . . .	Byte	 0000003C _DATA	
avgMsg . . . . . . . . . . . . .	Byte	 000001D8 _DATA	
avgNum . . . . . . . . . . . . .	DWord	 00000251 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	DWord	 0000025D _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
descMsg_1  . . . . . . . . . . .	Byte	 0000007D _DATA	
descMsg_2  . . . . . . . . . . .	Byte	 000000C4 _DATA	
descMsg_3  . . . . . . . . . . .	Byte	 0000011E _DATA	
displayNums  . . . . . . . . . .	Byte	 000001F3 _DATA	
errorMsg . . . . . . . . . . . .	Byte	 00000162 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbyeMsg . . . . . . . . . . .	Byte	 00000261 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instructionMsg . . . . . . . . .	Byte	 00000052 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
negSign  . . . . . . . . . . . .	DWord	 00000259 _DATA	
numsArray  . . . . . . . . . . .	DWord	 00000225 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
retryPrompt  . . . . . . . . . .	Byte	 000001A7 _DATA	
signedPrompt . . . . . . . . . .	Byte	 00000142 _DATA	
sumMsg . . . . . . . . . . . . .	Byte	 000001BA _DATA	
sumNum . . . . . . . . . . . . .	DWord	 0000024D _DATA	
tabMsg . . . . . . . . . . . . .	Byte	 00000217 _DATA	
titleMsg . . . . . . . . . . . .	Byte	 00000000 _DATA	
userInputLen . . . . . . . . . .	DWord	 00000255 _DATA	
userInput  . . . . . . . . . . .	Byte	 0000021A _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
